import{l as r,e as i}from"./index.027ae11e.js";const d="https://diamtestnet.diamcircle.io/",u="https://diamtestnet.diamcircle.io/",c=new r.Server(d),f=new r.Server(u);async function l(e){var s,t,n,a;if(r.StrKey.isValidEd25519PublicKey(e))try{return await c.accounts().accountId(e).call()}catch(o){throw((s=o.response)==null?void 0:s.status)===404?i(404,"account not funded on network"):i(((t=o.response)==null?void 0:t.status)??400,{message:`${(n=o.response)==null?void 0:n.title} - ${(a=o.response)==null?void 0:a.detail}`})}else throw i(400,{message:"invalid public key"})}async function h(e){const{balances:s}=await l(e);return s}async function p(e,s=10){const{records:t}=await c.payments().forAccount(e).limit(s).order("desc").call();return t}async function w(e){console.log(`i am requesting a friendbot funding for ${e}`),await f.friendbot(e).call()}async function v(e){var s,t;try{await c.submitTransaction(e)}catch(n){throw i(400,{message:`${(s=n.response)==null?void 0:s.title} - ${(t=n.response)==null?void 0:t.data.extras.result_codes}`})}}async function y(e){return(await Promise.all(e.map(async t=>{if("asset_issuer"in t){let n=await l(t.asset_issuer);if("home_domain"in n)return{...t,home_domain:n.home_domain}}}))).filter(t=>t)}async function g({sourceAsset:e,sourceAmount:s,destinationPublicKey:t}){let n=e==="native"?r.Asset.native():new r.Asset(e.split(":")[0],e.split(":")[1]),a=await c.strictSendPaths(n,s.toString(),t).call();if(a.records.length>0)return a.records;throw i(400,{message:"no strict send paths available"})}async function b({sourcePublicKey:e,destinationAsset:s,destinationAmount:t}){let n=s==="native"?r.Asset.native():new r.Asset(s.split(":")[0],s.split(":")[1]),a=await c.strictReceivePaths(e,n,t.toString()).call();if(a.records.length>0)return a.records;throw i(400,{message:"no strict receive paths available"})}export{p as a,l as b,g as c,b as d,y as e,h as f,w as g,v as s};
